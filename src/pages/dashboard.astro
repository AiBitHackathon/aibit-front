---
import Layout from '../layouts/Layout.astro';
import AuthProvider from '../components/AuthProvider';
import Dashboard from '../components/Dashboard';
---

<Layout title="Venice - Dashboard">
  <AuthProvider>
    <Dashboard client:only="react" />
  </AuthProvider>
</Layout>

<script>
  const API_URL = import.meta.env.PUBLIC_API_URL;
  
  // Display functions
  function displayActivityData(data) {
    if (!data || !data.summary) {
      document.getElementById('stepsCount').textContent = 'No data';
      document.getElementById('activeMinutes').textContent = 'No data';
      document.getElementById('distance').textContent = 'No data';
      document.getElementById('calories').textContent = 'No data';
      return;
    }

    const summary = data.summary;
    document.getElementById('stepsCount').textContent = summary.steps.toLocaleString();
    document.getElementById('activeMinutes').textContent = summary.veryActiveMinutes + ' min';
    document.getElementById('distance').textContent = summary.distances?.[0]?.distance.toFixed(2) + ' km';
    document.getElementById('calories').textContent = summary.caloriesOut.toLocaleString();
  }

  function displaySleepData(data) {
    if (!data || !data.sleep || !data.sleep[0]) {
      document.getElementById('sleepDuration').textContent = 'No data';
      document.getElementById('deepSleep').textContent = 'No data';
      document.getElementById('efficiency').textContent = 'No data';
      document.getElementById('remSleep').textContent = 'No data';
      return;
    }

    const sleep = data.sleep[0];
    const duration = sleep.duration / 3600000; // Convert from milliseconds to hours
    document.getElementById('sleepDuration').textContent = duration.toFixed(1) + ' hours';
    document.getElementById('deepSleep').textContent = ((sleep.levels?.summary?.deep?.minutes || 0) / 60).toFixed(1) + ' hours';
    document.getElementById('efficiency').textContent = sleep.efficiency + '%';
    document.getElementById('remSleep').textContent = ((sleep.levels?.summary?.rem?.minutes || 0) / 60).toFixed(1) + ' hours';
  }

  function displayWorkoutData(data) {
    const container = document.getElementById('workoutData');
    if (!data || !data.activities || data.activities.length === 0) {
      container.innerHTML = '<div class="p-4 sm:p-6 text-gray-500">No recent workouts</div>';
      return;
    }

    const workouts = data.activities.slice(0, 5); // Show last 5 workouts
    container.innerHTML = workouts.map(workout => `
      <div class="p-4 sm:p-6 hover:bg-gray-50 transition-colors">
        <div class="flex justify-between items-start">
          <div>
            <h3 class="font-semibold text-gray-900">${workout.name || 'Workout'}</h3>
            <p class="text-sm text-gray-500 mt-1">
              ${new Date(workout.startTime).toLocaleDateString()} ‚Ä¢ 
              ${workout.duration ? (workout.duration / 60000).toFixed(0) + ' min' : 'N/A'}
            </p>
          </div>
          <div class="text-right">
            <p class="font-semibold text-orange-500">${workout.calories || 0} cal</p>
            ${workout.distance ? `<p class="text-sm text-gray-500 mt-1">${workout.distance} km</p>` : ''}
          </div>
        </div>
      </div>
    `).join('');
  }

  function displayAIAnalysis(data) {
    const container = document.getElementById('aiAnalysis');
    if (!data || !data.evaluation) {
      container.innerHTML = '<div class="p-6 text-red-600">No analysis available</div>';
      return;
    }

    const { evaluation } = data;
    container.innerHTML = `
      <div class="p-6 space-y-8">
        <!-- Header -->
        <div class="border-b pb-6">
          <h2 class="text-2xl font-bold text-gray-900 mb-2">${data.message}</h2>
          <p class="text-lg text-blue-600 font-medium">Status: ${evaluation.overall_status}</p>
        </div>

        <!-- Achievements -->
        ${evaluation.achievements?.length ? `
          <div class="bg-green-50 rounded-xl p-6 border border-green-100">
            <h3 class="text-lg font-semibold text-green-800 flex items-center gap-2 mb-4">
              <span class="text-2xl">üéâ</span> Achievements
            </h3>
            <ul class="grid gap-3">
              ${evaluation.achievements.map(achievement => `
                <li class="flex items-start gap-3">
                  <span class="text-green-500">‚úì</span>
                  <span class="text-green-800">${achievement}</span>
                </li>
              `).join('')}
            </ul>
          </div>
        ` : ''}

        <!-- Metrics Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <!-- Health Metrics -->
          <div class="bg-gray-50 rounded-xl p-6">
            <h3 class="font-semibold text-gray-900 mb-4">Health Metrics</h3>
            <div class="grid gap-4">
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Activity Score</span>
                <span class="font-semibold">${evaluation.metrics.activity_score}/100</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Sleep Score</span>
                <span class="font-semibold">${evaluation.metrics.sleep_score}/100</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Stress Level</span>
                <span class="font-semibold">${evaluation.metrics.stress_level}</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Recovery Status</span>
                <span class="font-semibold">${evaluation.metrics.recovery_status}</span>
              </div>
            </div>
          </div>

          <!-- Workout Stats -->
          ${data.facts ? `
            <div class="bg-gray-50 rounded-xl p-6">
              <h3 class="font-semibold text-gray-900 mb-4">Workout Stats</h3>
              <div class="grid gap-4">
                ${data.facts.workout_frequency ? `
                  <div class="flex justify-between items-center">
                    <span class="text-gray-600">Frequency</span>
                    <span class="font-semibold">${data.facts.workout_frequency}</span>
                  </div>
                ` : ''}
                ${data.facts.avg_workout_duration ? `
                  <div class="flex justify-between items-center">
                    <span class="text-gray-600">Average Duration</span>
                    <span class="font-semibold">${data.facts.avg_workout_duration}</span>
                  </div>
                ` : ''}
                ${data.facts.total_workout_calories ? `
                  <div class="flex justify-between items-center">
                    <span class="text-gray-600">Total Calories</span>
                    <span class="font-semibold">${data.facts.total_workout_calories}</span>
                  </div>
                ` : ''}
                ${data.facts.workout_streak ? `
                  <div class="flex justify-between items-center">
                    <span class="text-gray-600">Current Streak</span>
                    <span class="font-semibold">${data.facts.workout_streak}</span>
                  </div>
                ` : ''}
              </div>
              ${data.facts.personal_bests?.length ? `
                <div class="mt-4 pt-4 border-t">
                  <h4 class="font-medium text-gray-900 mb-2">Personal Bests</h4>
                  <ul class="space-y-2">
                    ${data.facts.personal_bests.map(best => `
                      <li class="flex items-start gap-2">
                        <span class="text-yellow-500">‚≠ê</span>
                        <span>${best}</span>
                      </li>
                    `).join('')}
                  </ul>
                </div>
              ` : ''}
            </div>
          ` : ''}
        </div>

        <!-- Areas of Attention -->
        ${evaluation.concerns?.length ? `
          <div class="bg-yellow-50 rounded-xl p-6 border border-yellow-100">
            <h3 class="font-semibold text-yellow-800 mb-4">Areas of Attention</h3>
            <ul class="grid gap-3">
              ${evaluation.concerns.map(concern => `
                <li class="flex items-start gap-3">
                  <span class="text-yellow-500">!</span>
                  <span class="text-yellow-800">${concern}</span>
                </li>
              `).join('')}
            </ul>
          </div>
        ` : ''}

        <!-- Recommendations -->
        <div class="bg-blue-50 rounded-xl p-6 border border-blue-100">
          <h3 class="font-semibold text-blue-800 mb-4">Recommendations</h3>
          <div class="grid gap-6">
            ${Object.entries(evaluation.recommendations).map(([category, items]) => items?.length ? `
              <div>
                <h4 class="font-medium text-blue-900 mb-2">${category.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}</h4>
                <ul class="grid gap-2">
                  ${items.map(item => `
                    <li class="flex items-start gap-3">
                      <span class="text-blue-500">‚Üí</span>
                      <span class="text-blue-800">${item}</span>
                    </li>
                  `).join('')}
                </ul>
              </div>
            ` : '').join('')}
          </div>
        </div>
      </div>
    `;
  }

  // Initialize healthData globally
  window.healthData = null;

  async function fetchData() {
    try {
      showLoading(true);
      const tokens = JSON.parse(localStorage.getItem('fitbit_tokens') || '{}');
      if (!tokens.access_token) {
        throw new Error('No access token found. Please log in again.');
      }

      // Fetch activity data through our backend proxy
      const [activityResponse, sleepResponse, workoutResponse] = await Promise.all([
        fetch(`${API_URL}/api/fitbit/proxy/1/user/-/activities/date/${new Date().toISOString().split('T')[0]}.json`, { 
          headers: { 'Authorization': `Bearer ${tokens.access_token}` }
        }),
        fetch(`${API_URL}/api/fitbit/proxy/1.2/user/-/sleep/date/${new Date(Date.now() - 86400000).toISOString().split('T')[0]}/${new Date().toISOString().split('T')[0]}.json`, { 
          headers: { 'Authorization': `Bearer ${tokens.access_token}` }
        }),
        fetch(`${API_URL}/api/fitbit/workouts`, { 
          headers: { 'Authorization': `Bearer ${tokens.access_token}` }
        })
      ]);

      const activityData = await activityResponse.json();
      const sleepData = await sleepResponse.json();
      const workoutData = await workoutResponse.json();

      displayActivityData(activityData);
      displaySleepData(sleepData);
      displayWorkoutData(workoutData);

      // Store the data for AI analysis
      window.healthData = {
        activity: activityData.summary,
        sleep: sleepData.sleep?.[0],
        workouts: workoutData.activities?.filter(a => 
          a.activityName !== 'Walk' && a.activityName !== 'Transport'
        )
      };
      
      document.getElementById('analyzeBtn').disabled = false;
    } catch (error) {
      showError(error.message);
    } finally {
      showLoading(false);
    }
  }

  async function analyzeData() {
    try {
      const tokens = JSON.parse(localStorage.getItem('fitbit_tokens') || '{}');
      if (!tokens.access_token) {
        throw new Error('No access token found. Please log in again.');
      }

      const container = document.getElementById('aiAnalysis');
      container.innerHTML = '<div class="p-6 text-gray-600">Analyzing your data...</div>';
      
      // Make sure we have the latest data
      await fetchData();

      if (!window.healthData) {
        throw new Error('No health data available to analyze');
      }

      const response = await fetch(`${API_URL}/api/health-analysis`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${tokens.access_token}`
        },
        body: JSON.stringify(window.healthData)
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.details || 'Failed to analyze health data');
      }

      const analysis = await response.json();
      displayAIAnalysis(analysis);
    } catch (error) {
      showError(error.message);
    }
  }

  function showError(message) {
    const errorDiv = document.getElementById('error');
    const errorMessage = document.getElementById('errorMessage');
    if (errorDiv && errorMessage) {
      errorMessage.textContent = message;
      errorDiv.classList.remove('hidden');
    }
  }

  function showLoading(show) {
    const loading = document.getElementById('loading');
    if (loading) {
      if (show) {
        loading.classList.remove('hidden');
      } else {
        loading.classList.add('hidden');
      }
    }
  }

  // Initialize
  document.addEventListener('DOMContentLoaded', () => {
    fetchData();
    
    // Set up analyze button
    const analyzeButton = document.getElementById('analyzeBtn');
    if (analyzeButton) {
      analyzeButton.addEventListener('click', analyzeData);
    }

    // Set up logout button
    const logoutButton = document.getElementById('logoutBtn');
    if (logoutButton) {
      logoutButton.addEventListener('click', () => {
        // Clear Fitbit tokens from localStorage
        localStorage.removeItem('fitbit_tokens');
        // Redirect to home page
        window.location.href = '/';
      });
    }

    // Set up chat
    const chatInput = document.getElementById('chatInput');
    const sendButton = document.getElementById('sendMessage');
    const chatMessages = document.getElementById('chatMessages');

    if (chatInput && sendButton && chatMessages) {
      sendButton.addEventListener('click', () => {
        const message = chatInput.value.trim();
        if (message) {
          // Add user message
          chatMessages.innerHTML += `
            <div class="flex justify-end">
              <div class="bg-[#00B0B9] text-white rounded-lg px-4 py-2 max-w-[80%]">
                ${message}
              </div>
            </div>
          `;
          
          // Clear input
          chatInput.value = '';
          
          // TODO: Send message to AI and display response
        }
      });

      chatInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          sendButton.click();
        }
      });
    }
  });
</script>
